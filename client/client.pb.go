// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/client.proto

package client

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	pdi "github.com/plan-systems/plan-core/pdi" /// Redirected by build-go-proto.sh :)
	plan "github.com/plan-systems/plan-core/plan" /// Redirected by build-go-proto.sh :)
	repo "github.com/plan-systems/plan-core/repo" /// Redirected by build-go-proto.sh :)
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RgnPts int32

const (
	RgnPts_ORIGIN_X RgnPts = 0
	RgnPts_ORIGIN_Y RgnPts = 1
	RgnPts_ORIGIN_Z RgnPts = 2
)

var RgnPts_name = map[int32]string{
	0: "ORIGIN_X",
	1: "ORIGIN_Y",
	2: "ORIGIN_Z",
}

var RgnPts_value = map[string]int32{
	"ORIGIN_X": 0,
	"ORIGIN_Y": 1,
	"ORIGIN_Z": 2,
}

func (x RgnPts) String() string {
	return proto.EnumName(RgnPts_name, int32(x))
}

func (RgnPts) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d3551c163a1d198, []int{0}
}

type RegionType int32

const (
	// The first three points are the XYZ anchor point, and the 4th is the point gaussian radius (which is optional)
	RegionType_POINT RegionType = 0
	// The first three points are the XYZ anchor point and the the remaining are a sequence of UV cords that make a polygon.
	// â€ he polygon assumed to be closed, so the last point shouldn't be a repeat of the first point.
	RegionType_POLYGON_2D RegionType = 1
	// The first three points are the XYZ anchor point and the the remaining express a R3 spine.
	RegionType_SPLINE_2D RegionType = 2
)

var RegionType_name = map[int32]string{
	0: "POINT",
	1: "POLYGON_2D",
	2: "SPLINE_2D",
}

var RegionType_value = map[string]int32{
	"POINT":      0,
	"POLYGON_2D": 1,
	"SPLINE_2D":  2,
}

func (x RegionType) String() string {
	return proto.EnumName(RegionType_name, int32(x))
}

func (RegionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d3551c163a1d198, []int{1}
}

type LoginPB struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginPB) Reset()         { *m = LoginPB{} }
func (m *LoginPB) String() string { return proto.CompactTextString(m) }
func (*LoginPB) ProtoMessage()    {}
func (*LoginPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d3551c163a1d198, []int{0}
}
func (m *LoginPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginPB.Merge(m, src)
}
func (m *LoginPB) XXX_Size() int {
	return m.Size()
}
func (m *LoginPB) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginPB.DiscardUnknown(m)
}

var xxx_messageInfo_LoginPB proto.InternalMessageInfo

type SessionPB struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionPB) Reset()         { *m = SessionPB{} }
func (m *SessionPB) String() string { return proto.CompactTextString(m) }
func (*SessionPB) ProtoMessage()    {}
func (*SessionPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d3551c163a1d198, []int{1}
}
func (m *SessionPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionPB.Merge(m, src)
}
func (m *SessionPB) XXX_Size() int {
	return m.Size()
}
func (m *SessionPB) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionPB.DiscardUnknown(m)
}

var xxx_messageInfo_SessionPB proto.InternalMessageInfo

type MemberSeatReq struct {
	MemberSeed           *repo.MemberSeed `protobuf:"bytes,1,opt,name=member_seed,json=memberSeed,proto3" json:"member_seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MemberSeatReq) Reset()         { *m = MemberSeatReq{} }
func (m *MemberSeatReq) String() string { return proto.CompactTextString(m) }
func (*MemberSeatReq) ProtoMessage()    {}
func (*MemberSeatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d3551c163a1d198, []int{2}
}
func (m *MemberSeatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberSeatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberSeatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberSeatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberSeatReq.Merge(m, src)
}
func (m *MemberSeatReq) XXX_Size() int {
	return m.Size()
}
func (m *MemberSeatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberSeatReq.DiscardUnknown(m)
}

var xxx_messageInfo_MemberSeatReq proto.InternalMessageInfo

func (m *MemberSeatReq) GetMemberSeed() *repo.MemberSeed {
	if m != nil {
		return m.MemberSeed
	}
	return nil
}

type MemberSeat struct {
	SeatID               []byte            `protobuf:"bytes,1,opt,name=seatID,proto3" json:"seatID,omitempty"`
	MemberEpoch          *pdi.MemberEpoch  `protobuf:"bytes,10,opt,name=member_epoch,json=memberEpoch,proto3" json:"member_epoch,omitempty"`
	RepoSeed             *repo.RepoSeed    `protobuf:"bytes,11,opt,name=repo_seed,json=repoSeed,proto3" json:"repo_seed,omitempty"`
	GenesisSeed          *repo.GenesisSeed `protobuf:"bytes,12,opt,name=genesis_seed,json=genesisSeed,proto3" json:"genesis_seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MemberSeat) Reset()         { *m = MemberSeat{} }
func (m *MemberSeat) String() string { return proto.CompactTextString(m) }
func (*MemberSeat) ProtoMessage()    {}
func (*MemberSeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d3551c163a1d198, []int{3}
}
func (m *MemberSeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberSeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberSeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberSeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberSeat.Merge(m, src)
}
func (m *MemberSeat) XXX_Size() int {
	return m.Size()
}
func (m *MemberSeat) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberSeat.DiscardUnknown(m)
}

var xxx_messageInfo_MemberSeat proto.InternalMessageInfo

func (m *MemberSeat) GetSeatID() []byte {
	if m != nil {
		return m.SeatID
	}
	return nil
}

func (m *MemberSeat) GetMemberEpoch() *pdi.MemberEpoch {
	if m != nil {
		return m.MemberEpoch
	}
	return nil
}

func (m *MemberSeat) GetRepoSeed() *repo.RepoSeed {
	if m != nil {
		return m.RepoSeed
	}
	return nil
}

func (m *MemberSeat) GetGenesisSeed() *repo.GenesisSeed {
	if m != nil {
		return m.GenesisSeed
	}
	return nil
}

type WsLogin struct {
	// Rhe workstation seat ID that was issued via WsService.CreateNewSeat().
	SeatID []byte `protobuf:"bytes,1,opt,name=seatID,proto3" json:"seatID,omitempty"`
	// Used to decrypt the key hive within the given seat.
	Pass                 []byte   `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WsLogin) Reset()         { *m = WsLogin{} }
func (m *WsLogin) String() string { return proto.CompactTextString(m) }
func (*WsLogin) ProtoMessage()    {}
func (*WsLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d3551c163a1d198, []int{4}
}
func (m *WsLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WsLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WsLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WsLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WsLogin.Merge(m, src)
}
func (m *WsLogin) XXX_Size() int {
	return m.Size()
}
func (m *WsLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_WsLogin.DiscardUnknown(m)
}

var xxx_messageInfo_WsLogin proto.InternalMessageInfo

func (m *WsLogin) GetSeatID() []byte {
	if m != nil {
		return m.SeatID
	}
	return nil
}

func (m *WsLogin) GetPass() []byte {
	if m != nil {
		return m.Pass
	}
	return nil
}

type Region struct {
	Type RegionType `protobuf:"varint,1,opt,name=type,proto3,enum=client.RegionType" json:"type,omitempty"`
	Pts  []float64  `protobuf:"fixed64,2,rep,packed,name=pts,proto3" json:"pts,omitempty"`
	// Specifies the stroke style and color, etc
	StrokeStyleId        uint32     `protobuf:"varint,3,opt,name=stroke_style_id,json=strokeStyleId,proto3" json:"stroke_style_id,omitempty"`
	FillStyleId          uint32     `protobuf:"varint,4,opt,name=fill_style_id,json=fillStyleId,proto3" json:"fill_style_id,omitempty"`
	Link                 *plan.Link `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	Subs                 []*Region  `protobuf:"bytes,6,rep,name=subs,proto3" json:"subs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d3551c163a1d198, []int{5}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetType() RegionType {
	if m != nil {
		return m.Type
	}
	return RegionType_POINT
}

func (m *Region) GetPts() []float64 {
	if m != nil {
		return m.Pts
	}
	return nil
}

func (m *Region) GetStrokeStyleId() uint32 {
	if m != nil {
		return m.StrokeStyleId
	}
	return 0
}

func (m *Region) GetFillStyleId() uint32 {
	if m != nil {
		return m.FillStyleId
	}
	return 0
}

func (m *Region) GetLink() *plan.Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Region) GetSubs() []*Region {
	if m != nil {
		return m.Subs
	}
	return nil
}

func init() {
	proto.RegisterEnum("client.RgnPts", RgnPts_name, RgnPts_value)
	proto.RegisterEnum("client.RegionType", RegionType_name, RegionType_value)
	proto.RegisterType((*LoginPB)(nil), "client.LoginPB")
	proto.RegisterType((*SessionPB)(nil), "client.SessionPB")
	proto.RegisterType((*MemberSeatReq)(nil), "client.MemberSeatReq")
	proto.RegisterType((*MemberSeat)(nil), "client.MemberSeat")
	proto.RegisterType((*WsLogin)(nil), "client.WsLogin")
	proto.RegisterType((*Region)(nil), "client.Region")
}

func init() { proto.RegisterFile("client/client.proto", fileDescriptor_4d3551c163a1d198) }

var fileDescriptor_4d3551c163a1d198 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xee, 0x36, 0xa9, 0x5b, 0x8f, 0xe3, 0xd4, 0xff, 0xfe, 0x02, 0x59, 0x39, 0x44, 0x91, 0x0f,
	0x55, 0x28, 0x52, 0x02, 0x29, 0x70, 0xe0, 0x18, 0x5a, 0x45, 0x96, 0x42, 0x12, 0x6d, 0x2a, 0x95,
	0x72, 0x89, 0x92, 0x78, 0x30, 0xab, 0x38, 0xf6, 0xe2, 0x35, 0xa0, 0xbc, 0x09, 0x0f, 0xc3, 0x03,
	0x70, 0x44, 0x3c, 0x01, 0x0a, 0x2f, 0x82, 0x76, 0xd7, 0x21, 0xad, 0x10, 0x97, 0xcd, 0x7c, 0xdf,
	0x7c, 0x33, 0xfb, 0xcd, 0x66, 0x0c, 0xff, 0x2f, 0x13, 0x8e, 0x69, 0xd1, 0x35, 0x3f, 0x1d, 0x91,
	0x67, 0x45, 0x46, 0x2d, 0x83, 0x1a, 0xae, 0x88, 0x78, 0x57, 0x44, 0xdc, 0xd0, 0x8d, 0x53, 0x91,
	0xcc, 0xd3, 0xae, 0x3a, 0x76, 0x44, 0x8e, 0x22, 0xeb, 0xaa, 0xc3, 0x10, 0x81, 0x0d, 0xc7, 0xc3,
	0x2c, 0xe6, 0xe9, 0xa4, 0x1f, 0x38, 0x60, 0x4f, 0x51, 0x4a, 0x9e, 0x29, 0xd0, 0x07, 0xf7, 0x35,
	0xae, 0x17, 0x98, 0x4f, 0x71, 0x5e, 0x30, 0xfc, 0x40, 0x9f, 0x82, 0xb3, 0xd6, 0xc4, 0x4c, 0x22,
	0x46, 0x3e, 0x69, 0x91, 0xb6, 0xd3, 0xf3, 0x3a, 0xba, 0xd5, 0x4e, 0x89, 0x11, 0x83, 0xf5, 0x9f,
	0x38, 0xf8, 0x4a, 0x00, 0xf6, 0x4d, 0xe8, 0x43, 0xb0, 0x24, 0xce, 0x8b, 0xf0, 0x52, 0x17, 0xd7,
	0x58, 0x89, 0xe8, 0x05, 0xd4, 0xca, 0xce, 0x28, 0xb2, 0xe5, 0x7b, 0x1f, 0xca, 0xd6, 0x6a, 0x0c,
	0x53, 0x7e, 0xa5, 0x78, 0x56, 0xde, 0xaf, 0x01, 0x7d, 0x0c, 0xb6, 0xba, 0xda, 0x98, 0x71, 0x74,
	0x45, 0xdd, 0x98, 0x61, 0x28, 0x32, 0x6d, 0xe5, 0x24, 0x2f, 0x23, 0xfa, 0x0c, 0x6a, 0x31, 0xa6,
	0x28, 0xb9, 0x34, 0xfa, 0x9a, 0xd6, 0xff, 0x67, 0xf4, 0x03, 0x93, 0xd1, 0x25, 0x4e, 0xbc, 0x07,
	0xc1, 0x73, 0x38, 0xbe, 0x91, 0xfa, 0x71, 0xfe, 0x69, 0x9d, 0x42, 0x55, 0xcc, 0xa5, 0xf4, 0x0f,
	0x35, 0xab, 0xe3, 0xe0, 0x07, 0x01, 0x8b, 0x61, 0xcc, 0xb3, 0x94, 0x9e, 0x41, 0xb5, 0xd8, 0x08,
	0xd4, 0x45, 0xf5, 0x1e, 0xed, 0x94, 0x7f, 0x99, 0xc9, 0x5e, 0x6f, 0x04, 0x32, 0x9d, 0xa7, 0x1e,
	0x54, 0x44, 0xa1, 0xba, 0x54, 0xda, 0x84, 0xa9, 0x90, 0x9e, 0xc1, 0xa9, 0x2c, 0xf2, 0x6c, 0x85,
	0x33, 0x59, 0x6c, 0x12, 0x9c, 0xf1, 0xc8, 0xaf, 0xb4, 0x48, 0xdb, 0x65, 0xae, 0xa1, 0xa7, 0x8a,
	0x0d, 0x23, 0x1a, 0x80, 0xfb, 0x8e, 0x27, 0xc9, 0x5e, 0x55, 0xd5, 0x2a, 0x47, 0x91, 0x3b, 0x4d,
	0x13, 0xaa, 0x09, 0x4f, 0x57, 0xfe, 0x91, 0x9e, 0x1a, 0x3a, 0x7a, 0x1d, 0x86, 0x3c, 0x5d, 0x31,
	0xcd, 0xd3, 0x00, 0xaa, 0xf2, 0xe3, 0x42, 0xfa, 0x56, 0xab, 0xa2, 0x5f, 0xf1, 0x9e, 0x4b, 0xa6,
	0x73, 0xe7, 0x3d, 0xb0, 0x58, 0x9c, 0x4e, 0x0a, 0x49, 0x6b, 0x70, 0x32, 0x66, 0xe1, 0x20, 0x1c,
	0xcd, 0xde, 0x78, 0x07, 0x77, 0xd0, 0xad, 0x47, 0xee, 0xa0, 0xb7, 0xde, 0xe1, 0xf9, 0x0b, 0x80,
	0xfd, 0xa4, 0xd4, 0x86, 0xa3, 0xc9, 0x38, 0x1c, 0x5d, 0x7b, 0x07, 0xb4, 0x0e, 0x30, 0x19, 0x0f,
	0x6f, 0x07, 0xe3, 0xd1, 0xac, 0x77, 0xe9, 0x11, 0xea, 0x82, 0x3d, 0x9d, 0x0c, 0xc3, 0xd1, 0x95,
	0x82, 0x87, 0xbd, 0x1c, 0xec, 0x1b, 0x39, 0xc5, 0xfc, 0x13, 0x5f, 0x22, 0x7d, 0x09, 0xee, 0xab,
	0x1c, 0xe7, 0x05, 0x8e, 0xf0, 0xb3, 0xde, 0xa2, 0x07, 0x3b, 0x7f, 0xf7, 0xd6, 0xb3, 0x41, 0xff,
	0xa6, 0xe9, 0x23, 0x70, 0xc7, 0x02, 0x53, 0xd5, 0x4c, 0xaf, 0x35, 0xb5, 0xcb, 0x75, 0x95, 0x71,
	0x63, 0x1f, 0xb6, 0xc9, 0x13, 0xd2, 0xf7, 0xbe, 0x6d, 0x9b, 0xe4, 0xfb, 0xb6, 0x49, 0x7e, 0x6e,
	0x9b, 0xe4, 0xcb, 0xaf, 0xe6, 0xc1, 0xc2, 0xd2, 0xdf, 0xc7, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0x45, 0x57, 0x95, 0x6f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WsServiceClient is the client API for WsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WsServiceClient interface {
	CreateNewSeat(ctx context.Context, in *MemberSeatReq, opts ...grpc.CallOption) (*MemberSeat, error)
	// Opens a new member session.
	OpenWsSession(ctx context.Context, opts ...grpc.CallOption) (WsService_OpenWsSessionClient, error)
}

type wsServiceClient struct {
	cc *grpc.ClientConn
}

func NewWsServiceClient(cc *grpc.ClientConn) WsServiceClient {
	return &wsServiceClient{cc}
}

func (c *wsServiceClient) CreateNewSeat(ctx context.Context, in *MemberSeatReq, opts ...grpc.CallOption) (*MemberSeat, error) {
	out := new(MemberSeat)
	err := c.cc.Invoke(ctx, "/client.WsService/CreateNewSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wsServiceClient) OpenWsSession(ctx context.Context, opts ...grpc.CallOption) (WsService_OpenWsSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WsService_serviceDesc.Streams[0], "/client.WsService/OpenWsSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &wsServiceOpenWsSessionClient{stream}
	return x, nil
}

type WsService_OpenWsSessionClient interface {
	Send(*repo.Msg) error
	Recv() (*repo.Msg, error)
	grpc.ClientStream
}

type wsServiceOpenWsSessionClient struct {
	grpc.ClientStream
}

func (x *wsServiceOpenWsSessionClient) Send(m *repo.Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wsServiceOpenWsSessionClient) Recv() (*repo.Msg, error) {
	m := new(repo.Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WsServiceServer is the server API for WsService service.
type WsServiceServer interface {
	CreateNewSeat(context.Context, *MemberSeatReq) (*MemberSeat, error)
	// Opens a new member session.
	OpenWsSession(WsService_OpenWsSessionServer) error
}

// UnimplementedWsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWsServiceServer struct {
}

func (*UnimplementedWsServiceServer) CreateNewSeat(ctx context.Context, req *MemberSeatReq) (*MemberSeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewSeat not implemented")
}
func (*UnimplementedWsServiceServer) OpenWsSession(srv WsService_OpenWsSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenWsSession not implemented")
}

func RegisterWsServiceServer(s *grpc.Server, srv WsServiceServer) {
	s.RegisterService(&_WsService_serviceDesc, srv)
}

func _WsService_CreateNewSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberSeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServiceServer).CreateNewSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.WsService/CreateNewSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServiceServer).CreateNewSeat(ctx, req.(*MemberSeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WsService_OpenWsSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WsServiceServer).OpenWsSession(&wsServiceOpenWsSessionServer{stream})
}

type WsService_OpenWsSessionServer interface {
	Send(*repo.Msg) error
	Recv() (*repo.Msg, error)
	grpc.ServerStream
}

type wsServiceOpenWsSessionServer struct {
	grpc.ServerStream
}

func (x *wsServiceOpenWsSessionServer) Send(m *repo.Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wsServiceOpenWsSessionServer) Recv() (*repo.Msg, error) {
	m := new(repo.Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _WsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.WsService",
	HandlerType: (*WsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewSeat",
			Handler:    _WsService_CreateNewSeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenWsSession",
			Handler:       _WsService_OpenWsSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "client/client.proto",
}

func (m *LoginPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginPB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionPB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MemberSeatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberSeatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MemberSeed != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.MemberSeed.Size()))
		n1, err1 := m.MemberSeed.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MemberSeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberSeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SeatID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.SeatID)))
		i += copy(dAtA[i:], m.SeatID)
	}
	if m.MemberEpoch != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.MemberEpoch.Size()))
		n2, err2 := m.MemberEpoch.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.RepoSeed != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.RepoSeed.Size()))
		n3, err3 := m.RepoSeed.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.GenesisSeed != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.GenesisSeed.Size()))
		n4, err4 := m.GenesisSeed.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WsLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WsLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SeatID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.SeatID)))
		i += copy(dAtA[i:], m.SeatID)
	}
	if len(m.Pass) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Pass)))
		i += copy(dAtA[i:], m.Pass)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Type))
	}
	if len(m.Pts) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Pts)*8))
		for _, num := range m.Pts {
			f5 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f5))
			i += 8
		}
	}
	if m.StrokeStyleId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.StrokeStyleId))
	}
	if m.FillStyleId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.FillStyleId))
	}
	if m.Link != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Link.Size()))
		n6, err6 := m.Link.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if len(m.Subs) > 0 {
		for _, msg := range m.Subs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoginPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberSeatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberSeed != nil {
		l = m.MemberSeed.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberSeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SeatID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.MemberEpoch != nil {
		l = m.MemberEpoch.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.RepoSeed != nil {
		l = m.RepoSeed.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.GenesisSeed != nil {
		l = m.GenesisSeed.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WsLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SeatID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Pass)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovClient(uint64(m.Type))
	}
	if len(m.Pts) > 0 {
		n += 1 + sovClient(uint64(len(m.Pts)*8)) + len(m.Pts)*8
	}
	if m.StrokeStyleId != 0 {
		n += 1 + sovClient(uint64(m.StrokeStyleId))
	}
	if m.FillStyleId != 0 {
		n += 1 + sovClient(uint64(m.FillStyleId))
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.Subs) > 0 {
		for _, e := range m.Subs {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberSeatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberSeatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberSeatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberSeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberSeed == nil {
				m.MemberSeed = &repo.MemberSeed{}
			}
			if err := m.MemberSeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberSeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberSeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberSeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeatID = append(m.SeatID[:0], dAtA[iNdEx:postIndex]...)
			if m.SeatID == nil {
				m.SeatID = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberEpoch == nil {
				m.MemberEpoch = &pdi.MemberEpoch{}
			}
			if err := m.MemberEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoSeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepoSeed == nil {
				m.RepoSeed = &repo.RepoSeed{}
			}
			if err := m.RepoSeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisSeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisSeed == nil {
				m.GenesisSeed = &repo.GenesisSeed{}
			}
			if err := m.GenesisSeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WsLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WsLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WsLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeatID = append(m.SeatID[:0], dAtA[iNdEx:postIndex]...)
			if m.SeatID == nil {
				m.SeatID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pass = append(m.Pass[:0], dAtA[iNdEx:postIndex]...)
			if m.Pass == nil {
				m.Pass = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RegionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Pts = append(m.Pts, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClient
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClient
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Pts) == 0 {
					m.Pts = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Pts = append(m.Pts, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrokeStyleId", wireType)
			}
			m.StrokeStyleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrokeStyleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillStyleId", wireType)
			}
			m.FillStyleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillStyleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &plan.Link{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subs = append(m.Subs, &Region{})
			if err := m.Subs[len(m.Subs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthClient
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClient
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClient(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthClient
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClient = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient   = fmt.Errorf("proto: integer overflow")
)
