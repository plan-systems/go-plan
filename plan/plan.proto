// See plan-protobuf/README.md

syntax = "proto3";

package plan;


/******************************************************************************************************************************************
plan.Block is a fundamental PLAN data structure intended for generic content packaging and serialization. 
Its purpose is to be a flexible, extensible content container able to hold any number of sub containers, 
each containing content serialized in any form.

The principles behind Block were inspired from http, championed by Tim Berners-Lee and others in the 1990s. 
In http, "Content-Type" specifies a MIME type, a codec descriptor that specifies the binary format of content. 
In PLAN, every content blob (Block) has BOTH a label AND codec descriptor, allowing for more powerful use cases. 
Block.label tells clients HOW TO USE Block.content while Block.codec tells clients WHICH DATA HANDLER should be applied.

Examples:

    Block.label     Block.codec             Block.content
    -----------     -----------             -------------
    episode         audio/mp3               <mp3 data>
    episode         video/mpeg              <mpeg data>
    about           application/json        {title:"Introducing PLAN!", ep_num:42}
    icon            image/png               <png data>
    contact         /twitter/username       @juanbenet
    contact         /emailto                sj@apple.com
    Extras          /plan/Block/1           <protobuf encoding of plan.Block>
    personal-keys   /plan/ski/KeyList/1     <protobuf encoding of ski.KeyList>
    Message         text/plain              Hello, Universe!
    Message         text/rtf                {\rtf1\ansi\ansicpg1252...
    do-some-op      eth-block-list          <Ethereum RLP>
    do-other-op     eth-block-list          <Ethereum RLP>
    
*/

message Block {

    // This is an optional, human-understandable name/label for this Block (i.e. a field-name). 
    // In general, a Block's label conforms to the context/protocol its being used in or with (if applicable).
                string          label                   = 1;

    // Similar to a MIME type, this field self-describes the binary format of Block.content.  
    // Anyone handed this Block only needs to look a Block's codec in order to accurately process/deserialize its content.
    // This field is a "multicodec path" -- see: https://github.com/multiformats/multistream
                string          codec                   = 2;

    // This is alternative numerical repesentation of Block.codec
    // For a list of codes: https://github.com/multiformats/multicodec/blob/master/table.csv
                uint32          codec_code              = 3;

    // Data of any kind, serialized in conformance with the accompanying codec descriptor (above).
                bytes           content                 = 4;

    // In addition to it's label and content, a Block can contain nested "sub" blocks.  A Block's sub blocks
    //    can be interpreted or employed any way a client or protocol sees fit.
    repeated    Block           subs                    = 5;
}



