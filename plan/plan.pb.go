// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plan/plan.proto

package plan

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ValType int32

const (
	ValType_NONE  ValType = 0
	ValType_INT   ValType = 1
	ValType_FLOAT ValType = 2
	ValType_STR   ValType = 3
	ValType_BLOCK ValType = 4
)

var ValType_name = map[int32]string{
	0: "NONE",
	1: "INT",
	2: "FLOAT",
	3: "STR",
	4: "BLOCK",
}

var ValType_value = map[string]int32{
	"NONE":  0,
	"INT":   1,
	"FLOAT": 2,
	"STR":   3,
	"BLOCK": 4,
}

func (x ValType) String() string {
	return proto.EnumName(ValType_name, int32(x))
}

func (ValType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e4a7f424f641eed7, []int{0}
}

type ServiceType int32

const (
	ServiceType_Undefined       ServiceType = 0
	ServiceType_StorageProvider ServiceType = 1
	ServiceType_Repo            ServiceType = 2
	ServiceType_WsHost          ServiceType = 3
	ServiceType_ServiceTracker  ServiceType = 4
)

var ServiceType_name = map[int32]string{
	0: "Undefined",
	1: "StorageProvider",
	2: "Repo",
	3: "WsHost",
	4: "ServiceTracker",
}

var ServiceType_value = map[string]int32{
	"Undefined":       0,
	"StorageProvider": 1,
	"Repo":            2,
	"WsHost":          3,
	"ServiceTracker":  4,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e4a7f424f641eed7, []int{1}
}

// Block is a portable, compact, self-describing, nestable information container inspired from HTTP.
type Block struct {
	// An optional, name/label for this Block (i.e. a field-name).
	// A Block's label conforms to the context/protocol it's being used with (as applicable).
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Similar to a MIME type, this descriptor self-describes the data format of Block.content.
	// Anyone handed this Block uses this field to accurately process/deserialize its content.
	// This is a "multicodec path" -- see: https://github.com/multiformats/multistream
	Codec string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	// This is a reserved integer alternative to Block.Codec.
	// See: https://github.com/plan-systems/multicodec/blob/master/table.csv
	CodecCode uint32 `protobuf:"varint,3,opt,name=codec_code,json=codecCode,proto3" json:"codec_code,omitempty"`
	// Payload data, serialized in accordance with the accompanying codec descriptors (above).
	Content    []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ContentStr string `protobuf:"bytes,5,opt,name=content_str,json=contentStr,proto3" json:"content_str,omitempty"`
	// A Block can optionally contain nested "sub" blocks.  A Block's sub-blocks
	//    can be interpreted or employed any way a client or protocol sees fit.
	Subs                 []*Block `protobuf:"bytes,10,rep,name=subs,proto3" json:"subs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4a7f424f641eed7, []int{0}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Block) GetCodec() string {
	if m != nil {
		return m.Codec
	}
	return ""
}

func (m *Block) GetCodecCode() uint32 {
	if m != nil {
		return m.CodecCode
	}
	return 0
}

func (m *Block) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Block) GetContentStr() string {
	if m != nil {
		return m.ContentStr
	}
	return ""
}

func (m *Block) GetSubs() []*Block {
	if m != nil {
		return m.Subs
	}
	return nil
}

// Link is an opaque URI most comparable to a URL, but it's "multiaddr" style, rather than protocol://URI.
type Link struct {
	// THis is an optional label that describes this link or serves as an identifying key (and is follows a naming convention so this link can be identified by label)
	// This value is typically not seen by humans.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// This describes this link in a meaningful way
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// See docs on PLAN URIs (above)
	URI                  string   `protobuf:"bytes,3,opt,name=URI,proto3" json:"URI,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4a7f424f641eed7, []int{1}
}
func (m *Link) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Link.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(m, src)
}
func (m *Link) XXX_Size() int {
	return m.Size()
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

func (m *Link) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Link) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Link) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

type ChInvocation struct {
	ChID                 []byte   `protobuf:"bytes,1,opt,name=chID,proto3" json:"chID,omitempty"`
	ChProtocol           string   `protobuf:"bytes,2,opt,name=ch_protocol,json=chProtocol,proto3" json:"ch_protocol,omitempty"`
	ChAdapterID          string   `protobuf:"bytes,3,opt,name=ch_adapterID,json=chAdapterID,proto3" json:"ch_adapterID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChInvocation) Reset()         { *m = ChInvocation{} }
func (m *ChInvocation) String() string { return proto.CompactTextString(m) }
func (*ChInvocation) ProtoMessage()    {}
func (*ChInvocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4a7f424f641eed7, []int{2}
}
func (m *ChInvocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChInvocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChInvocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChInvocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChInvocation.Merge(m, src)
}
func (m *ChInvocation) XXX_Size() int {
	return m.Size()
}
func (m *ChInvocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ChInvocation.DiscardUnknown(m)
}

var xxx_messageInfo_ChInvocation proto.InternalMessageInfo

func (m *ChInvocation) GetChID() []byte {
	if m != nil {
		return m.ChID
	}
	return nil
}

func (m *ChInvocation) GetChProtocol() string {
	if m != nil {
		return m.ChProtocol
	}
	return ""
}

func (m *ChInvocation) GetChAdapterID() string {
	if m != nil {
		return m.ChAdapterID
	}
	return ""
}

// ServiceInfo contains descriptions, network addresses, ports, and connection info for remote services.
type ServiceInfo struct {
	ServiceType          ServiceType `protobuf:"varint,1,opt,name=service_type,json=serviceType,proto3,enum=plan.ServiceType" json:"service_type,omitempty"`
	NameID               string      `protobuf:"bytes,2,opt,name=nameID,proto3" json:"nameID,omitempty"`
	NodeID               []byte      `protobuf:"bytes,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Desc                 string      `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Addr                 string      `protobuf:"bytes,10,opt,name=addr,proto3" json:"addr,omitempty"`
	Network              string      `protobuf:"bytes,11,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ServiceInfo) Reset()         { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string { return proto.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()    {}
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4a7f424f641eed7, []int{3}
}
func (m *ServiceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInfo.Merge(m, src)
}
func (m *ServiceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServiceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInfo proto.InternalMessageInfo

func (m *ServiceInfo) GetServiceType() ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return ServiceType_Undefined
}

func (m *ServiceInfo) GetNameID() string {
	if m != nil {
		return m.NameID
	}
	return ""
}

func (m *ServiceInfo) GetNodeID() []byte {
	if m != nil {
		return m.NodeID
	}
	return nil
}

func (m *ServiceInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ServiceInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ServiceInfo) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

type Val struct {
	// The value's name/label/key
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies which of the below are set/valid
	ValType              ValType  `protobuf:"varint,2,opt,name=val_type,json=valType,proto3,enum=plan.ValType" json:"val_type,omitempty"`
	Int                  int64    `protobuf:"varint,3,opt,name=int,proto3" json:"int,omitempty"`
	Float                float64  `protobuf:"fixed64,4,opt,name=float,proto3" json:"float,omitempty"`
	Str                  string   `protobuf:"bytes,5,opt,name=str,proto3" json:"str,omitempty"`
	Block                *Block   `protobuf:"bytes,6,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Val) Reset()         { *m = Val{} }
func (m *Val) String() string { return proto.CompactTextString(m) }
func (*Val) ProtoMessage()    {}
func (*Val) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4a7f424f641eed7, []int{4}
}
func (m *Val) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Val) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Val.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Val) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Val.Merge(m, src)
}
func (m *Val) XXX_Size() int {
	return m.Size()
}
func (m *Val) XXX_DiscardUnknown() {
	xxx_messageInfo_Val.DiscardUnknown(m)
}

var xxx_messageInfo_Val proto.InternalMessageInfo

func (m *Val) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Val) GetValType() ValType {
	if m != nil {
		return m.ValType
	}
	return ValType_NONE
}

func (m *Val) GetInt() int64 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *Val) GetFloat() float64 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *Val) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Val) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type Status struct {
	// Information code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Information msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// An unordered list of arbitrary fields/params associated with this error
	Params               []*Val   `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4a7f424f641eed7, []int{5}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Status) GetParams() []*Val {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterEnum("plan.ValType", ValType_name, ValType_value)
	proto.RegisterEnum("plan.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterType((*Block)(nil), "plan.Block")
	proto.RegisterType((*Link)(nil), "plan.Link")
	proto.RegisterType((*ChInvocation)(nil), "plan.ChInvocation")
	proto.RegisterType((*ServiceInfo)(nil), "plan.ServiceInfo")
	proto.RegisterType((*Val)(nil), "plan.Val")
	proto.RegisterType((*Status)(nil), "plan.Status")
}

func init() { proto.RegisterFile("plan/plan.proto", fileDescriptor_e4a7f424f641eed7) }

var fileDescriptor_e4a7f424f641eed7 = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xc1, 0x6e, 0x13, 0x3b,
	0x14, 0xad, 0x33, 0x93, 0xa4, 0xb9, 0x93, 0xb6, 0xf3, 0xfc, 0x10, 0x9a, 0x0d, 0x69, 0x9a, 0x55,
	0xd4, 0x45, 0x91, 0x0a, 0x3b, 0x56, 0x4d, 0x0b, 0x62, 0x44, 0xd5, 0x16, 0x27, 0x2d, 0x0b, 0x16,
	0x91, 0xe3, 0x71, 0x9a, 0x51, 0xa7, 0xf6, 0xc8, 0xe3, 0x06, 0xf5, 0x4f, 0x58, 0xf2, 0x05, 0xec,
	0xf8, 0x07, 0x96, 0x7c, 0x02, 0x2a, 0x3f, 0x82, 0x7c, 0xc7, 0x49, 0x11, 0x12, 0x9b, 0xd1, 0x39,
	0xc7, 0x9e, 0x7b, 0x8f, 0xcf, 0xbd, 0xb0, 0x53, 0x16, 0x5c, 0x3d, 0x77, 0x9f, 0x83, 0xd2, 0x68,
	0xab, 0x69, 0xe8, 0xf0, 0xe0, 0x2b, 0x81, 0xe6, 0xa8, 0xd0, 0xe2, 0x86, 0x3e, 0x81, 0x66, 0xc1,
	0x67, 0xb2, 0x48, 0x48, 0x9f, 0x0c, 0x3b, 0xac, 0x26, 0x4e, 0x15, 0x3a, 0x93, 0x22, 0x69, 0xd4,
	0x2a, 0x12, 0xfa, 0x0c, 0x00, 0xc1, 0xd4, 0x7d, 0x93, 0xa0, 0x4f, 0x86, 0x5b, 0xac, 0x83, 0xca,
	0xb1, 0xce, 0x24, 0x4d, 0xa0, 0x2d, 0xb4, 0xb2, 0x52, 0xd9, 0x24, 0xec, 0x93, 0x61, 0x97, 0xad,
	0x28, 0xdd, 0x85, 0xc8, 0xc3, 0x69, 0x65, 0x4d, 0xd2, 0xc4, 0xa2, 0xe0, 0xa5, 0xb1, 0x35, 0x74,
	0x17, 0xc2, 0xea, 0x6e, 0x56, 0x25, 0xd0, 0x0f, 0x86, 0xd1, 0x61, 0x74, 0x80, 0x86, 0xd1, 0x20,
	0xc3, 0x83, 0xc1, 0x08, 0xc2, 0xd3, 0x5c, 0xfd, 0xcb, 0x2e, 0x85, 0x30, 0x93, 0xd5, 0xca, 0x2d,
	0x62, 0x1a, 0x43, 0x70, 0xc9, 0x52, 0x74, 0xd9, 0x61, 0x0e, 0x0e, 0xe6, 0xd0, 0x3d, 0x5e, 0xa4,
	0x6a, 0xa9, 0x05, 0xb7, 0xb9, 0x56, 0xee, 0x2f, 0xb1, 0x48, 0x4f, 0xb0, 0x54, 0x97, 0x21, 0x46,
	0xa7, 0x8b, 0x29, 0x46, 0x25, 0x74, 0xe1, 0x0b, 0x82, 0x58, 0x5c, 0x78, 0x85, 0xee, 0x41, 0x57,
	0x2c, 0xa6, 0x3c, 0xe3, 0xa5, 0x95, 0x26, 0x3d, 0xf1, 0xf5, 0x23, 0xb1, 0x38, 0x5a, 0x49, 0x83,
	0x6f, 0x04, 0xa2, 0xb1, 0x34, 0xcb, 0x5c, 0xc8, 0x54, 0xcd, 0x35, 0x7d, 0x09, 0xdd, 0xaa, 0xa6,
	0x53, 0x7b, 0x5f, 0x4a, 0xec, 0xb7, 0x7d, 0xf8, 0x5f, 0xfd, 0x48, 0x7f, 0x71, 0x72, 0x5f, 0x4a,
	0x16, 0x55, 0x8f, 0x84, 0x3e, 0x85, 0x96, 0xe2, 0xb7, 0x32, 0x3d, 0xf1, 0x26, 0x3c, 0x43, 0x5d,
	0x67, 0xd2, 0xb7, 0xee, 0x32, 0xcf, 0xd6, 0x19, 0x84, 0x7f, 0x64, 0x40, 0x21, 0xe4, 0x59, 0x66,
	0x12, 0xa8, 0x35, 0x87, 0xdd, 0x94, 0x94, 0xb4, 0x9f, 0xb4, 0xb9, 0x49, 0x22, 0x94, 0x57, 0x74,
	0xf0, 0x85, 0x40, 0x70, 0xc5, 0x31, 0x4d, 0xd7, 0xcb, 0x47, 0x8c, 0x98, 0x0e, 0x61, 0x73, 0xc9,
	0x8b, 0xda, 0x7f, 0x03, 0xfd, 0x6f, 0xd5, 0xfe, 0xaf, 0x78, 0x81, 0xde, 0xdb, 0xcb, 0x1a, 0xb8,
	0xdc, 0x73, 0x65, 0xd1, 0x5c, 0xc0, 0x1c, 0x74, 0x33, 0x9b, 0x17, 0x9a, 0xd7, 0x5b, 0x41, 0x58,
	0x4d, 0xdc, 0xbd, 0xc7, 0x5d, 0x70, 0x90, 0xee, 0x41, 0x73, 0xe6, 0x46, 0x9e, 0xb4, 0xfa, 0xe4,
	0xef, 0x2d, 0xa8, 0x4f, 0x06, 0xef, 0xa1, 0x35, 0xb6, 0xdc, 0xde, 0x55, 0x38, 0x3c, 0xb7, 0x85,
	0xce, 0x64, 0x93, 0x21, 0x76, 0x25, 0x6f, 0xab, 0x6b, 0x9f, 0x97, 0x83, 0x74, 0x0f, 0x5a, 0x25,
	0x37, 0xfc, 0xb6, 0x4a, 0x02, 0xdc, 0xac, 0xce, 0xda, 0x34, 0xf3, 0x07, 0xfb, 0xaf, 0xa0, 0xed,
	0xdf, 0x40, 0x37, 0x21, 0x3c, 0x3b, 0x3f, 0x7b, 0x1d, 0x6f, 0xd0, 0x36, 0x04, 0xe9, 0xd9, 0x24,
	0x26, 0xb4, 0x03, 0xcd, 0x37, 0xa7, 0xe7, 0x47, 0x93, 0xb8, 0xe1, 0xb4, 0xf1, 0x84, 0xc5, 0x81,
	0xd3, 0x46, 0xa7, 0xe7, 0xc7, 0xef, 0xe2, 0x70, 0xff, 0xe3, 0x7a, 0xd2, 0x58, 0x60, 0x0b, 0x3a,
	0x97, 0x2a, 0x93, 0xf3, 0x5c, 0xc9, 0x2c, 0xde, 0xa0, 0xff, 0xc3, 0xce, 0xd8, 0x6a, 0xc3, 0xaf,
	0xe5, 0x85, 0xd1, 0xcb, 0x3c, 0x93, 0x26, 0x26, 0xae, 0x09, 0x93, 0xa5, 0x8e, 0x1b, 0x14, 0xa0,
	0xf5, 0xa1, 0x7a, 0xab, 0x2b, 0x1b, 0x07, 0x94, 0xc2, 0xf6, 0xaa, 0x90, 0xe1, 0xe2, 0x46, 0x9a,
	0x38, 0x1c, 0xc5, 0xdf, 0x1f, 0x7a, 0xe4, 0xc7, 0x43, 0x8f, 0xfc, 0x7c, 0xe8, 0x91, 0xcf, 0xbf,
	0x7a, 0x1b, 0xb3, 0x16, 0x2e, 0xe6, 0x8b, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x5d, 0x9b,
	0x47, 0xd6, 0x03, 0x00, 0x00,
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Codec) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Codec)))
		i += copy(dAtA[i:], m.Codec)
	}
	if m.CodecCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.CodecCode))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.ContentStr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.ContentStr)))
		i += copy(dAtA[i:], m.ContentStr)
	}
	if len(m.Subs) > 0 {
		for _, msg := range m.Subs {
			dAtA[i] = 0x52
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Link) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChInvocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChInvocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.ChID)))
		i += copy(dAtA[i:], m.ChID)
	}
	if len(m.ChProtocol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.ChProtocol)))
		i += copy(dAtA[i:], m.ChProtocol)
	}
	if len(m.ChAdapterID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.ChAdapterID)))
		i += copy(dAtA[i:], m.ChAdapterID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServiceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServiceType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.ServiceType))
	}
	if len(m.NameID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.NameID)))
		i += copy(dAtA[i:], m.NameID)
	}
	if len(m.NodeID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.NodeID)))
		i += copy(dAtA[i:], m.NodeID)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Val) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Val) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ValType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.ValType))
	}
	if m.Int != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Int))
	}
	if m.Float != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float))))
		i += 8
	}
	if len(m.Str) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if m.Block != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Block.Size()))
		n1, err1 := m.Block.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Params) > 0 {
		for _, msg := range m.Params {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPlan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.Codec)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if m.CodecCode != 0 {
		n += 1 + sovPlan(uint64(m.CodecCode))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.ContentStr)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.Subs) > 0 {
		for _, e := range m.Subs {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Link) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChInvocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChID)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.ChProtocol)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.ChAdapterID)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceType != 0 {
		n += 1 + sovPlan(uint64(m.ServiceType))
	}
	l = len(m.NameID)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Val) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if m.ValType != 0 {
		n += 1 + sovPlan(uint64(m.ValType))
	}
	if m.Int != 0 {
		n += 1 + sovPlan(uint64(m.Int))
	}
	if m.Float != 0 {
		n += 9
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPlan(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPlan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlan(x uint64) (n int) {
	return sovPlan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodecCode", wireType)
			}
			m.CodecCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodecCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subs = append(m.Subs, &Block{})
			if err := m.Subs[len(m.Subs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChInvocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChInvocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChInvocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChID = append(m.ChID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChID == nil {
				m.ChID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChAdapterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChAdapterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = append(m.NodeID[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeID == nil {
				m.NodeID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Val) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Val: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Val: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValType", wireType)
			}
			m.ValType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValType |= ValType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			m.Int = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Float = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, &Val{})
			if err := m.Params[len(m.Params)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlan
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPlan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPlan
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlan   = fmt.Errorf("proto: integer overflow")
)
