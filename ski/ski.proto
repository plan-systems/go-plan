// See plan-protobuf/README.md

syntax = "proto3";

package ski;


enum KeyType {
    NOT_SET             = 0;

    SYMMETRIC_KEY       = 1;
    ASYMMETRIC_KEY      = 2;
    SIGNING_KEY         = 3;
}


enum KeyDomain {

    // Keys scoped outside this community
    GLOBAL              = 0;

    // Keys shared with all other community members
    COMMUNITY           = 1;

    // Keys explicitly shared with select community members (e.g. private channel keys)
    PEERS               = 2;

    // Private keyring -- should never be shared with others, even peers in the community.
    PERSONAL            = 3;

}

enum  CryptoKitID {
    DEFAULT_KIT_ID      = 0;

    NaCl                = 1;
}

 

// KeyEntry is used in 3 ways:
//    1) Storage/Export mode: KeyEntry used to store all fields of a fully generated key 
//         a) KeyEntry.PrivKey != nil
//    2) Ref/Spec mode: KeyEntry used to reference/specifiy an existing key somewhere else 
//         a) KeyEntry.PrivKey == nil
//         b) Fields used: KeyType, KeyDomain, PubKey (other fields ignored)
//    3) KeyGen mode: KeyEntry used to generate a new key
//         a) Fields used: KeyType, KeyDomain, CryptoKitID (other fields ignored)
message KeyEntry {
    
    // Specifies what type of KeyType this is (or NOT_SET)
                KeyType         key_type                = 1;

    // Specifies which domaon/area this key is used in
                KeyDomain       key_domain              = 2;

    // Specifies which CryptoKit handles this key's ops
                CryptoKitID     crypto_kit_id           = 3;

    // Unix timestamp when this key was created (or 0 if not set)
                int64           time_created            = 4;

    // Public part of the key; how this key is also referenced publicly.
    // When a KeyEntry is being used to specify the generation of a new key, this field is ignored.
                bytes           pub_key                 = 5;

    // Private part of the key -- should be used and copied carefully.
    // When a KeyEntry is used to reference/specify an existing key, this field is not set and/or is ignored.
                bytes           priv_key                = 6;

}





// KeyBundle packages a set of KeyEntry structs (for one of the above three prescribed purposes).
// When a KeyBundle is serialized, it's identified by the codec name ski.KeyBundleProtobufCodec.
message KeyBundle {

    // The community associated with the keys in this bundle
                bytes           community_id            = 1;

    // Key storage
    repeated    KeyEntry        keys                    = 2;
}



message KeyTome {

    // Unix timestamp of when this was last modified (or 0 if not set)
                int64           lastModified            = 1;

    // Key storage
    repeated    KeyBundle       bundles                 = 2;
}


