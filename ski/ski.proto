// See plan-protobuf/README.md

syntax = "proto3";

package ski;


enum KeyType {
    NOT_SET             = 0;

    SYMMETRIC_KEY       = 1;
    ASYMMETRIC_KEY      = 2;
    SIGNING_KEY         = 3;
}

enum  CryptoPkgID {
    INVALID_PKG_ID      = 0;

    NaCl                = 1;
}




message KeyEntry {
    
    // key_info := (CryptoPkgID << 3) |  KeyType
                uint32          key_info                = 1;

    // Unix timestamp when this key was created
                int64           time_created            = 2;

    // Private part of the key -- should be used and copied carefully.
                bytes           priv_key                = 3;

    // Public part of the key; how this key is also referenced publicly.
                bytes           pub_key                 = 4;
}



enum KeyDomain {

    // Keyring shared with all community members
    COMMUNITY_KEYRING           = 0;

    // Personal keyring for private channels
    PRIVATE_CHANNEL_KEYRING     = 1;

    // Personal keyring
    PERSONAL_KEYRING            = 2;

}

// KeyList is a list of KeyEntries and when serialized is identified by the codec name ski.KeyListProtobufCodec
message KeyList {

    // The community associated with the keys in this list
                bytes           community_id            = 1;

    // The key domain associated with the keys in this list
                KeyDomain       key_domain              = 2;

    // Key storage
    repeated    KeyEntry        keys                    = 3;
}




// KeySpec effectively names/specifies a key (within a given community keyring)
message KeySpec {

    // Which key domain does this key live in?
                KeyDomain       key_domain              = 1;

    // Optional -- the type of the key (or NOT_SET)
                KeyType         key_type                = 2;

    // KeyEntry.PubKey
                bytes           pub_key                 = 3;
}


// KeySpecs is a list of KeySpec and when serialized is identified by the codec name ski.KeySpecsProtobufCodec
message KeySpecs {

    repeated    KeySpec         key_specs               = 1;
}



/*
message KeyPathname {

    // The parent community and domain in question
                KeyPath         path                    = 1;

    // The key's public name (for asysmmetric keys, the public key)
                bytes           pub_key                 = 2;


}



message KeyRepo {

                KeyPath         key_path                = 1;


   // repeated    map<string, 
     //               bytes>      op_args                 = 3;

}




*/