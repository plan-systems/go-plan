// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ski.proto

/*
	Package ski is a generated protocol buffer package.

	It is generated from these files:
		ski.proto

	It has these top-level messages:
		KeyEntry
		KeyList
*/
package ski

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KeyType int32

const (
	KeyType_SYMMETRIC_KEY  KeyType = 0
	KeyType_ENCRYPTION_KEY KeyType = 1
	KeyType_SIGNING_KEY    KeyType = 2
)

var KeyType_name = map[int32]string{
	0: "SYMMETRIC_KEY",
	1: "ENCRYPTION_KEY",
	2: "SIGNING_KEY",
}
var KeyType_value = map[string]int32{
	"SYMMETRIC_KEY":  0,
	"ENCRYPTION_KEY": 1,
	"SIGNING_KEY":    2,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}
func (KeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSki, []int{0} }

type KeyEntry struct {
	KeyType      KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=ski.KeyType" json:"key_type,omitempty"`
	CreationTime int64   `protobuf:"varint,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	PrivKey      []byte  `protobuf:"bytes,3,opt,name=privKey,proto3" json:"privKey,omitempty"`
	PubKey       []byte  `protobuf:"bytes,4,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *KeyEntry) Reset()                    { *m = KeyEntry{} }
func (m *KeyEntry) String() string            { return proto.CompactTextString(m) }
func (*KeyEntry) ProtoMessage()               {}
func (*KeyEntry) Descriptor() ([]byte, []int) { return fileDescriptorSki, []int{0} }

func (m *KeyEntry) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_SYMMETRIC_KEY
}

func (m *KeyEntry) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *KeyEntry) GetPrivKey() []byte {
	if m != nil {
		return m.PrivKey
	}
	return nil
}

func (m *KeyEntry) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type KeyList struct {
	Vers int32       `protobuf:"varint,1,opt,name=vers,proto3" json:"vers,omitempty"`
	Keys []*KeyEntry `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
}

func (m *KeyList) Reset()                    { *m = KeyList{} }
func (m *KeyList) String() string            { return proto.CompactTextString(m) }
func (*KeyList) ProtoMessage()               {}
func (*KeyList) Descriptor() ([]byte, []int) { return fileDescriptorSki, []int{1} }

func (m *KeyList) GetVers() int32 {
	if m != nil {
		return m.Vers
	}
	return 0
}

func (m *KeyList) GetKeys() []*KeyEntry {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyEntry)(nil), "ski.KeyEntry")
	proto.RegisterType((*KeyList)(nil), "ski.KeyList")
	proto.RegisterEnum("ski.KeyType", KeyType_name, KeyType_value)
}
func (m *KeyEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSki(dAtA, i, uint64(m.KeyType))
	}
	if m.CreationTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSki(dAtA, i, uint64(m.CreationTime))
	}
	if len(m.PrivKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSki(dAtA, i, uint64(len(m.PrivKey)))
		i += copy(dAtA[i:], m.PrivKey)
	}
	if len(m.PubKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSki(dAtA, i, uint64(len(m.PubKey)))
		i += copy(dAtA[i:], m.PubKey)
	}
	return i, nil
}

func (m *KeyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vers != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSki(dAtA, i, uint64(m.Vers))
	}
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSki(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSki(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KeyEntry) Size() (n int) {
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovSki(uint64(m.KeyType))
	}
	if m.CreationTime != 0 {
		n += 1 + sovSki(uint64(m.CreationTime))
	}
	l = len(m.PrivKey)
	if l > 0 {
		n += 1 + l + sovSki(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovSki(uint64(l))
	}
	return n
}

func (m *KeyList) Size() (n int) {
	var l int
	_ = l
	if m.Vers != 0 {
		n += 1 + sovSki(uint64(m.Vers))
	}
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovSki(uint64(l))
		}
	}
	return n
}

func sovSki(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSki(x uint64) (n int) {
	return sovSki(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSki
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (KeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSki
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivKey = append(m.PrivKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivKey == nil {
				m.PrivKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSki
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSki(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSki
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSki
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vers", wireType)
			}
			m.Vers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSki
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &KeyEntry{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSki(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSki
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSki(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSki
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSki
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSki
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSki
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSki
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSki(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSki = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSki   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ski.proto", fileDescriptorSki) }

var fileDescriptorSki = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0x41, 0x4e, 0x83, 0x40,
	0x14, 0x86, 0x3b, 0x80, 0xa5, 0xbe, 0x42, 0xad, 0x6f, 0x61, 0x58, 0x11, 0xac, 0x0b, 0x89, 0x8b,
	0x2e, 0xea, 0x05, 0xd4, 0x86, 0x34, 0x04, 0x8b, 0x66, 0xca, 0x86, 0x15, 0xb1, 0xe6, 0x2d, 0x26,
	0xa4, 0x85, 0xc0, 0xd8, 0x64, 0xae, 0xe0, 0x09, 0x3c, 0x92, 0x4b, 0x8f, 0x60, 0xf0, 0x22, 0xa6,
	0xa3, 0xec, 0xfe, 0xff, 0xff, 0x26, 0x93, 0x2f, 0x0f, 0x4e, 0xdb, 0x52, 0xcc, 0xeb, 0xa6, 0x92,
	0x15, 0x9a, 0x6d, 0x29, 0x66, 0xef, 0x0c, 0x46, 0x09, 0xa9, 0x68, 0x2f, 0x1b, 0x85, 0xd7, 0x30,
	0x2a, 0x49, 0x15, 0x52, 0xd5, 0xe4, 0xb1, 0x80, 0x85, 0x93, 0x85, 0x33, 0x3f, 0xbe, 0x4f, 0x48,
	0x65, 0xaa, 0x26, 0x6e, 0x97, 0x7f, 0x01, 0xaf, 0xc0, 0x7d, 0x6d, 0xe8, 0x45, 0x8a, 0x6a, 0x5f,
	0x48, 0xb1, 0x23, 0xcf, 0x08, 0x58, 0x68, 0x72, 0xa7, 0x1f, 0x33, 0xb1, 0x23, 0xf4, 0xc0, 0xae,
	0x1b, 0x71, 0x48, 0x48, 0x79, 0x66, 0xc0, 0x42, 0x87, 0xf7, 0x15, 0x2f, 0x60, 0x58, 0xbf, 0x6d,
	0x8f, 0xc0, 0xd2, 0xe0, 0xbf, 0xcd, 0xee, 0xc0, 0x4e, 0x48, 0x3d, 0x8a, 0x56, 0x22, 0x82, 0x75,
	0xa0, 0xa6, 0xd5, 0x1a, 0x27, 0x5c, 0x67, 0xbc, 0x04, 0xab, 0x24, 0xd5, 0x7a, 0x46, 0x60, 0x86,
	0xe3, 0x85, 0xdb, 0xab, 0x69, 0x77, 0xae, 0xd1, 0xcd, 0xbd, 0xfe, 0x41, 0x3b, 0x9e, 0x83, 0xbb,
	0xc9, 0xd7, 0xeb, 0x28, 0xe3, 0xf1, 0xb2, 0x48, 0xa2, 0x7c, 0x3a, 0x40, 0x84, 0x49, 0x94, 0x2e,
	0x79, 0xfe, 0x9c, 0xc5, 0x4f, 0xa9, 0xde, 0x18, 0x9e, 0xc1, 0x78, 0x13, 0xaf, 0xd2, 0x38, 0x5d,
	0xe9, 0xc1, 0x78, 0x98, 0x7e, 0x76, 0x3e, 0xfb, 0xea, 0x7c, 0xf6, 0xdd, 0xf9, 0xec, 0xe3, 0xc7,
	0x1f, 0x6c, 0x87, 0xfa, 0x5e, 0xb7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0xf3, 0x94, 0x79,
	0x3c, 0x01, 0x00, 0x00,
}
