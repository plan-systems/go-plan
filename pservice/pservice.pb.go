// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pservice.proto

/*
	Package pservice is a generated protocol buffer package.

	It is generated from these files:
		pservice.proto

	It has these top-level messages:
		StatusQuery
		StatusReply
		ClientInfo
		SessionInfo
		PStatus
		HeaderEntry
		PDIChannelInfo
		PDIChannelList
		PDIChannelProperties
		PDIEntry
		PDIEntryHeader
		PDIBodyPart
		ChannelSearchParams
		ChannelEntryQuery
*/
package pservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusQuery struct {
	TestGreeting string `protobuf:"bytes,1,opt,name=test_greeting,json=testGreeting,proto3" json:"test_greeting,omitempty"`
}

func (m *StatusQuery) Reset()                    { *m = StatusQuery{} }
func (m *StatusQuery) String() string            { return proto.CompactTextString(m) }
func (*StatusQuery) ProtoMessage()               {}
func (*StatusQuery) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{0} }

func (m *StatusQuery) GetTestGreeting() string {
	if m != nil {
		return m.TestGreeting
	}
	return ""
}

type StatusReply struct {
	TestReply string `protobuf:"bytes,1,opt,name=test_reply,json=testReply,proto3" json:"test_reply,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{1} }

func (m *StatusReply) GetTestReply() string {
	if m != nil {
		return m.TestReply
	}
	return ""
}

type ClientInfo struct {
	CommunityId   []byte `protobuf:"bytes,1,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	MemberId      []byte `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	WorkstationId []byte `protobuf:"bytes,3,opt,name=workstation_id,json=workstationId,proto3" json:"workstation_id,omitempty"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (m *ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{2} }

func (m *ClientInfo) GetCommunityId() []byte {
	if m != nil {
		return m.CommunityId
	}
	return nil
}

func (m *ClientInfo) GetMemberId() []byte {
	if m != nil {
		return m.MemberId
	}
	return nil
}

func (m *ClientInfo) GetWorkstationId() []byte {
	if m != nil {
		return m.WorkstationId
	}
	return nil
}

type SessionInfo struct {
	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{3} }

func (m *SessionInfo) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type PStatus struct {
	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (m *PStatus) Reset()                    { *m = PStatus{} }
func (m *PStatus) String() string            { return proto.CompactTextString(m) }
func (*PStatus) ProtoMessage()               {}
func (*PStatus) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{4} }

func (m *PStatus) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *PStatus) GetStatusMsg() string {
	if m != nil {
		return m.StatusMsg
	}
	return ""
}

type HeaderEntry struct {
	FieldName  string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue []string `protobuf:"bytes,2,rep,name=field_value,json=fieldValue" json:"field_value,omitempty"`
}

func (m *HeaderEntry) Reset()                    { *m = HeaderEntry{} }
func (m *HeaderEntry) String() string            { return proto.CompactTextString(m) }
func (*HeaderEntry) ProtoMessage()               {}
func (*HeaderEntry) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{5} }

func (m *HeaderEntry) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *HeaderEntry) GetFieldValue() []string {
	if m != nil {
		return m.FieldValue
	}
	return nil
}

type PDIChannelInfo struct {
	ChannelId        []byte         `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessChannelId  []byte         `protobuf:"bytes,2,opt,name=access_channel_id,json=accessChannelId,proto3" json:"access_channel_id,omitempty"`
	AccessChannelRev int64          `protobuf:"varint,3,opt,name=access_channel_rev,json=accessChannelRev,proto3" json:"access_channel_rev,omitempty"`
	Header           []*HeaderEntry `protobuf:"bytes,4,rep,name=header" json:"header,omitempty"`
}

func (m *PDIChannelInfo) Reset()                    { *m = PDIChannelInfo{} }
func (m *PDIChannelInfo) String() string            { return proto.CompactTextString(m) }
func (*PDIChannelInfo) ProtoMessage()               {}
func (*PDIChannelInfo) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{6} }

func (m *PDIChannelInfo) GetChannelId() []byte {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *PDIChannelInfo) GetAccessChannelId() []byte {
	if m != nil {
		return m.AccessChannelId
	}
	return nil
}

func (m *PDIChannelInfo) GetAccessChannelRev() int64 {
	if m != nil {
		return m.AccessChannelRev
	}
	return 0
}

func (m *PDIChannelInfo) GetHeader() []*HeaderEntry {
	if m != nil {
		return m.Header
	}
	return nil
}

type PDIChannelList struct {
	Channels []*PDIChannelInfo `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
}

func (m *PDIChannelList) Reset()                    { *m = PDIChannelList{} }
func (m *PDIChannelList) String() string            { return proto.CompactTextString(m) }
func (*PDIChannelList) ProtoMessage()               {}
func (*PDIChannelList) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{7} }

func (m *PDIChannelList) GetChannels() []*PDIChannelInfo {
	if m != nil {
		return m.Channels
	}
	return nil
}

type PDIChannelProperties struct {
	ChannelName string         `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	ChannelDesc string         `protobuf:"bytes,2,opt,name=channel_desc,json=channelDesc,proto3" json:"channel_desc,omitempty"`
	Header      []*HeaderEntry `protobuf:"bytes,4,rep,name=header" json:"header,omitempty"`
}

func (m *PDIChannelProperties) Reset()                    { *m = PDIChannelProperties{} }
func (m *PDIChannelProperties) String() string            { return proto.CompactTextString(m) }
func (*PDIChannelProperties) ProtoMessage()               {}
func (*PDIChannelProperties) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{8} }

func (m *PDIChannelProperties) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *PDIChannelProperties) GetChannelDesc() string {
	if m != nil {
		return m.ChannelDesc
	}
	return ""
}

func (m *PDIChannelProperties) GetHeader() []*HeaderEntry {
	if m != nil {
		return m.Header
	}
	return nil
}

type PDIEntry struct {
	EntryInfo   int32           `protobuf:"varint,1,opt,name=entry_info,json=entryInfo,proto3" json:"entry_info,omitempty"`
	Sig         []byte          `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	Hash        []byte          `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	EntryHeader *PDIEntryHeader `protobuf:"bytes,4,opt,name=entry_header,json=entryHeader" json:"entry_header,omitempty"`
	EntryParts  []*PDIBodyPart  `protobuf:"bytes,5,rep,name=entry_parts,json=entryParts" json:"entry_parts,omitempty"`
}

func (m *PDIEntry) Reset()                    { *m = PDIEntry{} }
func (m *PDIEntry) String() string            { return proto.CompactTextString(m) }
func (*PDIEntry) ProtoMessage()               {}
func (*PDIEntry) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{9} }

func (m *PDIEntry) GetEntryInfo() int32 {
	if m != nil {
		return m.EntryInfo
	}
	return 0
}

func (m *PDIEntry) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *PDIEntry) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PDIEntry) GetEntryHeader() *PDIEntryHeader {
	if m != nil {
		return m.EntryHeader
	}
	return nil
}

func (m *PDIEntry) GetEntryParts() []*PDIBodyPart {
	if m != nil {
		return m.EntryParts
	}
	return nil
}

type PDIEntryHeader struct {
	Verb             int32          `protobuf:"varint,1,opt,name=verb,proto3" json:"verb,omitempty"`
	ChannelId        []byte         `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AuthorId         []byte         `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	AccessChannelId  []byte         `protobuf:"bytes,4,opt,name=access_channel_id,json=accessChannelId,proto3" json:"access_channel_id,omitempty"`
	AccessChannelRev int64          `protobuf:"varint,5,opt,name=access_channel_rev,json=accessChannelRev,proto3" json:"access_channel_rev,omitempty"`
	Time             uint64         `protobuf:"fixed64,6,opt,name=time,proto3" json:"time,omitempty"`
	AuxHeader        []*HeaderEntry `protobuf:"bytes,7,rep,name=aux_header,json=auxHeader" json:"aux_header,omitempty"`
}

func (m *PDIEntryHeader) Reset()                    { *m = PDIEntryHeader{} }
func (m *PDIEntryHeader) String() string            { return proto.CompactTextString(m) }
func (*PDIEntryHeader) ProtoMessage()               {}
func (*PDIEntryHeader) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{10} }

func (m *PDIEntryHeader) GetVerb() int32 {
	if m != nil {
		return m.Verb
	}
	return 0
}

func (m *PDIEntryHeader) GetChannelId() []byte {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *PDIEntryHeader) GetAuthorId() []byte {
	if m != nil {
		return m.AuthorId
	}
	return nil
}

func (m *PDIEntryHeader) GetAccessChannelId() []byte {
	if m != nil {
		return m.AccessChannelId
	}
	return nil
}

func (m *PDIEntryHeader) GetAccessChannelRev() int64 {
	if m != nil {
		return m.AccessChannelRev
	}
	return 0
}

func (m *PDIEntryHeader) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PDIEntryHeader) GetAuxHeader() []*HeaderEntry {
	if m != nil {
		return m.AuxHeader
	}
	return nil
}

type PDIBodyPart struct {
	Header  []*HeaderEntry `protobuf:"bytes,1,rep,name=header" json:"header,omitempty"`
	Content []byte         `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PDIBodyPart) Reset()                    { *m = PDIBodyPart{} }
func (m *PDIBodyPart) String() string            { return proto.CompactTextString(m) }
func (*PDIBodyPart) ProtoMessage()               {}
func (*PDIBodyPart) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{11} }

func (m *PDIBodyPart) GetHeader() []*HeaderEntry {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PDIBodyPart) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type ChannelSearchParams struct {
	Flags int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (m *ChannelSearchParams) Reset()                    { *m = ChannelSearchParams{} }
func (m *ChannelSearchParams) String() string            { return proto.CompactTextString(m) }
func (*ChannelSearchParams) ProtoMessage()               {}
func (*ChannelSearchParams) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{12} }

func (m *ChannelSearchParams) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type ChannelEntryQuery struct {
	Flags int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (m *ChannelEntryQuery) Reset()                    { *m = ChannelEntryQuery{} }
func (m *ChannelEntryQuery) String() string            { return proto.CompactTextString(m) }
func (*ChannelEntryQuery) ProtoMessage()               {}
func (*ChannelEntryQuery) Descriptor() ([]byte, []int) { return fileDescriptorPservice, []int{13} }

func (m *ChannelEntryQuery) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func init() {
	proto.RegisterType((*StatusQuery)(nil), "pservice.StatusQuery")
	proto.RegisterType((*StatusReply)(nil), "pservice.StatusReply")
	proto.RegisterType((*ClientInfo)(nil), "pservice.ClientInfo")
	proto.RegisterType((*SessionInfo)(nil), "pservice.SessionInfo")
	proto.RegisterType((*PStatus)(nil), "pservice.PStatus")
	proto.RegisterType((*HeaderEntry)(nil), "pservice.HeaderEntry")
	proto.RegisterType((*PDIChannelInfo)(nil), "pservice.PDIChannelInfo")
	proto.RegisterType((*PDIChannelList)(nil), "pservice.PDIChannelList")
	proto.RegisterType((*PDIChannelProperties)(nil), "pservice.PDIChannelProperties")
	proto.RegisterType((*PDIEntry)(nil), "pservice.PDIEntry")
	proto.RegisterType((*PDIEntryHeader)(nil), "pservice.PDIEntryHeader")
	proto.RegisterType((*PDIBodyPart)(nil), "pservice.PDIBodyPart")
	proto.RegisterType((*ChannelSearchParams)(nil), "pservice.ChannelSearchParams")
	proto.RegisterType((*ChannelEntryQuery)(nil), "pservice.ChannelEntryQuery")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pservice service

type PserviceClient interface {
	BeginSession(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*SessionInfo, error)
	ReportStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*StatusReply, error)
	QueryChannels(ctx context.Context, in *ChannelSearchParams, opts ...grpc.CallOption) (*PDIChannelList, error)
	OpenChannelEntryQuery(ctx context.Context, in *ChannelEntryQuery, opts ...grpc.CallOption) (Pservice_OpenChannelEntryQueryClient, error)
	PublishChannelEntry(ctx context.Context, in *PDIEntry, opts ...grpc.CallOption) (*PStatus, error)
}

type pserviceClient struct {
	cc *grpc.ClientConn
}

func NewPserviceClient(cc *grpc.ClientConn) PserviceClient {
	return &pserviceClient{cc}
}

func (c *pserviceClient) BeginSession(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*SessionInfo, error) {
	out := new(SessionInfo)
	err := grpc.Invoke(ctx, "/pservice.Pservice/BeginSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pserviceClient) ReportStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/pservice.Pservice/ReportStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pserviceClient) QueryChannels(ctx context.Context, in *ChannelSearchParams, opts ...grpc.CallOption) (*PDIChannelList, error) {
	out := new(PDIChannelList)
	err := grpc.Invoke(ctx, "/pservice.Pservice/QueryChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pserviceClient) OpenChannelEntryQuery(ctx context.Context, in *ChannelEntryQuery, opts ...grpc.CallOption) (Pservice_OpenChannelEntryQueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pservice_serviceDesc.Streams[0], c.cc, "/pservice.Pservice/OpenChannelEntryQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &pserviceOpenChannelEntryQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pservice_OpenChannelEntryQueryClient interface {
	Recv() (*PDIEntry, error)
	grpc.ClientStream
}

type pserviceOpenChannelEntryQueryClient struct {
	grpc.ClientStream
}

func (x *pserviceOpenChannelEntryQueryClient) Recv() (*PDIEntry, error) {
	m := new(PDIEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pserviceClient) PublishChannelEntry(ctx context.Context, in *PDIEntry, opts ...grpc.CallOption) (*PStatus, error) {
	out := new(PStatus)
	err := grpc.Invoke(ctx, "/pservice.Pservice/PublishChannelEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pservice service

type PserviceServer interface {
	BeginSession(context.Context, *ClientInfo) (*SessionInfo, error)
	ReportStatus(context.Context, *StatusQuery) (*StatusReply, error)
	QueryChannels(context.Context, *ChannelSearchParams) (*PDIChannelList, error)
	OpenChannelEntryQuery(*ChannelEntryQuery, Pservice_OpenChannelEntryQueryServer) error
	PublishChannelEntry(context.Context, *PDIEntry) (*PStatus, error)
}

func RegisterPserviceServer(s *grpc.Server, srv PserviceServer) {
	s.RegisterService(&_Pservice_serviceDesc, srv)
}

func _Pservice_BeginSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PserviceServer).BeginSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pservice.Pservice/BeginSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PserviceServer).BeginSession(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pservice_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PserviceServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pservice.Pservice/ReportStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PserviceServer).ReportStatus(ctx, req.(*StatusQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pservice_QueryChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelSearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PserviceServer).QueryChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pservice.Pservice/QueryChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PserviceServer).QueryChannels(ctx, req.(*ChannelSearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pservice_OpenChannelEntryQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChannelEntryQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PserviceServer).OpenChannelEntryQuery(m, &pserviceOpenChannelEntryQueryServer{stream})
}

type Pservice_OpenChannelEntryQueryServer interface {
	Send(*PDIEntry) error
	grpc.ServerStream
}

type pserviceOpenChannelEntryQueryServer struct {
	grpc.ServerStream
}

func (x *pserviceOpenChannelEntryQueryServer) Send(m *PDIEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Pservice_PublishChannelEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PDIEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PserviceServer).PublishChannelEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pservice.Pservice/PublishChannelEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PserviceServer).PublishChannelEntry(ctx, req.(*PDIEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pservice.Pservice",
	HandlerType: (*PserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginSession",
			Handler:    _Pservice_BeginSession_Handler,
		},
		{
			MethodName: "ReportStatus",
			Handler:    _Pservice_ReportStatus_Handler,
		},
		{
			MethodName: "QueryChannels",
			Handler:    _Pservice_QueryChannels_Handler,
		},
		{
			MethodName: "PublishChannelEntry",
			Handler:    _Pservice_PublishChannelEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenChannelEntryQuery",
			Handler:       _Pservice_OpenChannelEntryQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pservice.proto",
}

func (m *StatusQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TestGreeting) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.TestGreeting)))
		i += copy(dAtA[i:], m.TestGreeting)
	}
	return i, nil
}

func (m *StatusReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TestReply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.TestReply)))
		i += copy(dAtA[i:], m.TestReply)
	}
	return i, nil
}

func (m *ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommunityId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.CommunityId)))
		i += copy(dAtA[i:], m.CommunityId)
	}
	if len(m.MemberId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.MemberId)))
		i += copy(dAtA[i:], m.MemberId)
	}
	if len(m.WorkstationId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.WorkstationId)))
		i += copy(dAtA[i:], m.WorkstationId)
	}
	return i, nil
}

func (m *SessionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.SessionToken)))
		i += copy(dAtA[i:], m.SessionToken)
	}
	return i, nil
}

func (m *PStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPservice(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.StatusMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.StatusMsg)))
		i += copy(dAtA[i:], m.StatusMsg)
	}
	return i, nil
}

func (m *HeaderEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FieldName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	if len(m.FieldValue) > 0 {
		for _, s := range m.FieldValue {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *PDIChannelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDIChannelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.ChannelId)))
		i += copy(dAtA[i:], m.ChannelId)
	}
	if len(m.AccessChannelId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.AccessChannelId)))
		i += copy(dAtA[i:], m.AccessChannelId)
	}
	if m.AccessChannelRev != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPservice(dAtA, i, uint64(m.AccessChannelRev))
	}
	if len(m.Header) > 0 {
		for _, msg := range m.Header {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PDIChannelList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDIChannelList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PDIChannelProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDIChannelProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.ChannelName)))
		i += copy(dAtA[i:], m.ChannelName)
	}
	if len(m.ChannelDesc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.ChannelDesc)))
		i += copy(dAtA[i:], m.ChannelDesc)
	}
	if len(m.Header) > 0 {
		for _, msg := range m.Header {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PDIEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDIEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntryInfo != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPservice(dAtA, i, uint64(m.EntryInfo))
	}
	if len(m.Sig) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.Sig)))
		i += copy(dAtA[i:], m.Sig)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.EntryHeader != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPservice(dAtA, i, uint64(m.EntryHeader.Size()))
		n1, err := m.EntryHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.EntryParts) > 0 {
		for _, msg := range m.EntryParts {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PDIEntryHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDIEntryHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Verb != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPservice(dAtA, i, uint64(m.Verb))
	}
	if len(m.ChannelId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.ChannelId)))
		i += copy(dAtA[i:], m.ChannelId)
	}
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	if len(m.AccessChannelId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.AccessChannelId)))
		i += copy(dAtA[i:], m.AccessChannelId)
	}
	if m.AccessChannelRev != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPservice(dAtA, i, uint64(m.AccessChannelRev))
	}
	if m.Time != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Time))
		i += 8
	}
	if len(m.AuxHeader) > 0 {
		for _, msg := range m.AuxHeader {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintPservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PDIBodyPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDIBodyPart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Header) > 0 {
		for _, msg := range m.Header {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPservice(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *ChannelSearchParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelSearchParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPservice(dAtA, i, uint64(m.Flags))
	}
	return i, nil
}

func (m *ChannelEntryQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelEntryQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPservice(dAtA, i, uint64(m.Flags))
	}
	return i, nil
}

func encodeVarintPservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StatusQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.TestGreeting)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	return n
}

func (m *StatusReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.TestReply)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	return n
}

func (m *ClientInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.CommunityId)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	l = len(m.MemberId)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	l = len(m.WorkstationId)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	return n
}

func (m *SessionInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionToken)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	return n
}

func (m *PStatus) Size() (n int) {
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovPservice(uint64(m.StatusCode))
	}
	l = len(m.StatusMsg)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	return n
}

func (m *HeaderEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	if len(m.FieldValue) > 0 {
		for _, s := range m.FieldValue {
			l = len(s)
			n += 1 + l + sovPservice(uint64(l))
		}
	}
	return n
}

func (m *PDIChannelInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	l = len(m.AccessChannelId)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	if m.AccessChannelRev != 0 {
		n += 1 + sovPservice(uint64(m.AccessChannelRev))
	}
	if len(m.Header) > 0 {
		for _, e := range m.Header {
			l = e.Size()
			n += 1 + l + sovPservice(uint64(l))
		}
	}
	return n
}

func (m *PDIChannelList) Size() (n int) {
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovPservice(uint64(l))
		}
	}
	return n
}

func (m *PDIChannelProperties) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChannelName)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	l = len(m.ChannelDesc)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	if len(m.Header) > 0 {
		for _, e := range m.Header {
			l = e.Size()
			n += 1 + l + sovPservice(uint64(l))
		}
	}
	return n
}

func (m *PDIEntry) Size() (n int) {
	var l int
	_ = l
	if m.EntryInfo != 0 {
		n += 1 + sovPservice(uint64(m.EntryInfo))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	if m.EntryHeader != nil {
		l = m.EntryHeader.Size()
		n += 1 + l + sovPservice(uint64(l))
	}
	if len(m.EntryParts) > 0 {
		for _, e := range m.EntryParts {
			l = e.Size()
			n += 1 + l + sovPservice(uint64(l))
		}
	}
	return n
}

func (m *PDIEntryHeader) Size() (n int) {
	var l int
	_ = l
	if m.Verb != 0 {
		n += 1 + sovPservice(uint64(m.Verb))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	l = len(m.AccessChannelId)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	if m.AccessChannelRev != 0 {
		n += 1 + sovPservice(uint64(m.AccessChannelRev))
	}
	if m.Time != 0 {
		n += 9
	}
	if len(m.AuxHeader) > 0 {
		for _, e := range m.AuxHeader {
			l = e.Size()
			n += 1 + l + sovPservice(uint64(l))
		}
	}
	return n
}

func (m *PDIBodyPart) Size() (n int) {
	var l int
	_ = l
	if len(m.Header) > 0 {
		for _, e := range m.Header {
			l = e.Size()
			n += 1 + l + sovPservice(uint64(l))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPservice(uint64(l))
	}
	return n
}

func (m *ChannelSearchParams) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPservice(uint64(m.Flags))
	}
	return n
}

func (m *ChannelEntryQuery) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPservice(uint64(m.Flags))
	}
	return n
}

func sovPservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPservice(x uint64) (n int) {
	return sovPservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestGreeting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestGreeting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestReply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestReply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityId = append(m.CommunityId[:0], dAtA[iNdEx:postIndex]...)
			if m.CommunityId == nil {
				m.CommunityId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberId = append(m.MemberId[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberId == nil {
				m.MemberId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkstationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkstationId = append(m.WorkstationId[:0], dAtA[iNdEx:postIndex]...)
			if m.WorkstationId == nil {
				m.WorkstationId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldValue = append(m.FieldValue, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDIChannelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDIChannelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDIChannelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = append(m.ChannelId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChannelId == nil {
				m.ChannelId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessChannelId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessChannelId = append(m.AccessChannelId[:0], dAtA[iNdEx:postIndex]...)
			if m.AccessChannelId == nil {
				m.AccessChannelId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessChannelRev", wireType)
			}
			m.AccessChannelRev = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessChannelRev |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header, &HeaderEntry{})
			if err := m.Header[len(m.Header)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDIChannelList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDIChannelList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDIChannelList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &PDIChannelInfo{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDIChannelProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDIChannelProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDIChannelProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header, &HeaderEntry{})
			if err := m.Header[len(m.Header)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDIEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDIEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDIEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryInfo", wireType)
			}
			m.EntryInfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryInfo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryHeader == nil {
				m.EntryHeader = &PDIEntryHeader{}
			}
			if err := m.EntryHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryParts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryParts = append(m.EntryParts, &PDIBodyPart{})
			if err := m.EntryParts[len(m.EntryParts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDIEntryHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDIEntryHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDIEntryHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verb", wireType)
			}
			m.Verb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = append(m.ChannelId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChannelId == nil {
				m.ChannelId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = append(m.AuthorId[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthorId == nil {
				m.AuthorId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessChannelId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessChannelId = append(m.AccessChannelId[:0], dAtA[iNdEx:postIndex]...)
			if m.AccessChannelId == nil {
				m.AccessChannelId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessChannelRev", wireType)
			}
			m.AccessChannelRev = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessChannelRev |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuxHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuxHeader = append(m.AuxHeader, &HeaderEntry{})
			if err := m.AuxHeader[len(m.AuxHeader)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDIBodyPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDIBodyPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDIBodyPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header, &HeaderEntry{})
			if err := m.Header[len(m.Header)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelSearchParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelSearchParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelSearchParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelEntryQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelEntryQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelEntryQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPservice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pservice.proto", fileDescriptorPservice) }

var fileDescriptorPservice = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0xc6, 0xf9, 0x9b, 0xb8, 0x9c, 0x0c, 0x33, 0xbd, 0xb3, 0x92, 0x95, 0xd1, 0x84, 0xe0, 0x15,
	0x52, 0x80, 0x65, 0x85, 0x86, 0x15, 0x17, 0xf6, 0x34, 0x09, 0xb0, 0x46, 0x2c, 0x18, 0x2f, 0xda,
	0xab, 0xd5, 0xb1, 0x2b, 0x89, 0xb5, 0xb1, 0x1d, 0x75, 0xb7, 0xc3, 0xe6, 0xce, 0x8d, 0x17, 0xe0,
	0x51, 0x78, 0x00, 0x0e, 0x1c, 0xb9, 0x72, 0x43, 0xc3, 0x8b, 0xa0, 0xfe, 0x49, 0xec, 0x4d, 0x66,
	0x11, 0x7b, 0xeb, 0xfa, 0xea, 0xeb, 0xee, 0xfa, 0xbe, 0x2e, 0x97, 0xe1, 0x74, 0xcd, 0x91, 0x6d,
	0xd2, 0x18, 0x1f, 0xad, 0x59, 0x21, 0x0a, 0xd2, 0xdd, 0xc5, 0xde, 0x35, 0x38, 0xcf, 0x05, 0x15,
	0x25, 0xff, 0xa1, 0x44, 0xb6, 0x25, 0x0f, 0xa0, 0x2f, 0x90, 0x8b, 0x68, 0xc1, 0x10, 0x45, 0x9a,
	0x2f, 0x5c, 0x6b, 0x64, 0x8d, 0xed, 0xb0, 0x27, 0xc1, 0xaf, 0x0d, 0xe6, 0x3d, 0xdc, 0xed, 0x09,
	0x71, 0xbd, 0xda, 0x92, 0x2b, 0x00, 0xb5, 0x87, 0xc9, 0xc8, 0x6c, 0xb0, 0x25, 0xa2, 0xd2, 0x1e,
	0x07, 0x98, 0xac, 0x52, 0xcc, 0x85, 0x9f, 0xcf, 0x0b, 0xf2, 0x3e, 0xf4, 0xe2, 0x22, 0xcb, 0xca,
	0x3c, 0x15, 0xdb, 0x28, 0x4d, 0x14, 0xbd, 0x17, 0x3a, 0x7b, 0xcc, 0x4f, 0xc8, 0x25, 0xd8, 0x19,
	0x66, 0x33, 0x64, 0x32, 0xdf, 0x50, 0xf9, 0xae, 0x06, 0xfc, 0x84, 0x7c, 0x00, 0xa7, 0x3f, 0x15,
	0xec, 0x25, 0x17, 0x54, 0xa4, 0x45, 0x2e, 0x19, 0x4d, 0xc5, 0xe8, 0xd7, 0x50, 0x3f, 0x51, 0xb2,
	0x90, 0x73, 0x19, 0xc8, 0x5b, 0x1f, 0x40, 0x9f, 0xeb, 0x30, 0x12, 0xc5, 0x4b, 0xcc, 0x77, 0xb2,
	0x0c, 0xf8, 0xa3, 0xc4, 0x3c, 0x1f, 0x4e, 0x02, 0xad, 0x8b, 0xbc, 0x07, 0x0e, 0x57, 0xab, 0x28,
	0x2e, 0x12, 0x54, 0xec, 0x76, 0x08, 0x1a, 0x9a, 0x14, 0x09, 0x4a, 0xcd, 0x86, 0x90, 0xf1, 0x85,
	0x2a, 0xd2, 0x0e, 0x6d, 0x8d, 0x3c, 0xe3, 0x0b, 0xef, 0x19, 0x38, 0x4f, 0x91, 0x26, 0xc8, 0xbe,
	0xcc, 0x05, 0x53, 0x0e, 0xcd, 0x53, 0x5c, 0x25, 0x51, 0x4e, 0x33, 0xdc, 0x39, 0xa4, 0x90, 0xef,
	0x68, 0x86, 0xf2, 0x36, 0x9d, 0xde, 0xd0, 0x55, 0x89, 0x6e, 0x63, 0xd4, 0x1c, 0xdb, 0xa1, 0xde,
	0xf1, 0x42, 0x22, 0xde, 0x6f, 0x16, 0x9c, 0x06, 0x53, 0x7f, 0xb2, 0xa4, 0x79, 0x8e, 0x2b, 0xa5,
	0xe8, 0x0a, 0x20, 0xd6, 0x61, 0xe5, 0xa2, 0x6d, 0x10, 0x3f, 0x21, 0x1f, 0xc1, 0x39, 0x8d, 0x63,
	0xe4, 0x3c, 0xaa, 0xb1, 0xb4, 0x97, 0xef, 0xea, 0xc4, 0x64, 0xcf, 0x7d, 0x08, 0xe4, 0x80, 0xcb,
	0x70, 0xa3, 0x6c, 0x6d, 0x86, 0x67, 0xaf, 0x91, 0x43, 0xdc, 0x90, 0x4f, 0xa0, 0xb3, 0x54, 0xd2,
	0xdc, 0xd6, 0xa8, 0x39, 0x76, 0xae, 0xef, 0x3f, 0xda, 0xf7, 0x56, 0x4d, 0x72, 0x68, 0x48, 0xde,
	0x57, 0xf5, 0xca, 0xbf, 0x4d, 0xb9, 0x20, 0x8f, 0xa1, 0x6b, 0xee, 0xe1, 0xae, 0xa5, 0x8e, 0x70,
	0xab, 0x23, 0x5e, 0x57, 0x19, 0xee, 0x99, 0xde, 0x2f, 0x16, 0x5c, 0x54, 0xc9, 0x80, 0x15, 0x6b,
	0x64, 0x22, 0x45, 0xae, 0x1a, 0xca, 0x94, 0x5d, 0x73, 0xd7, 0x31, 0x98, 0xf2, 0xb7, 0x46, 0x49,
	0x90, 0xc7, 0xe6, 0xb9, 0x76, 0x94, 0x29, 0xf2, 0xf8, 0x6d, 0x55, 0xfd, 0x6e, 0x41, 0x37, 0x98,
	0xfa, 0xfb, 0xd7, 0x45, 0xb9, 0x88, 0xd2, 0x7c, 0x5e, 0x98, 0x5e, 0xb1, 0x15, 0xa2, 0x5e, 0xea,
	0x0c, 0x9a, 0x3c, 0x5d, 0x18, 0xf3, 0xe5, 0x92, 0x10, 0x68, 0x2d, 0x29, 0x5f, 0x9a, 0xce, 0x55,
	0x6b, 0xf2, 0x05, 0xf4, 0xf4, 0x21, 0xfb, 0x32, 0xac, 0x23, 0x67, 0xd4, 0x75, 0xba, 0x9c, 0xd0,
	0xc1, 0x2a, 0x20, 0x9f, 0x83, 0x0e, 0xa3, 0x35, 0x65, 0x82, 0xbb, 0xed, 0x43, 0x09, 0xc1, 0xd4,
	0xbf, 0x29, 0x92, 0x6d, 0x40, 0x99, 0x08, 0x75, 0xad, 0x72, 0xc9, 0xbd, 0x9f, 0x1b, 0xea, 0x75,
	0x6a, 0xe7, 0xca, 0xda, 0x36, 0xc8, 0x66, 0x46, 0x86, 0x5a, 0x1f, 0xf4, 0x5a, 0xe3, 0xb0, 0xd7,
	0x2e, 0xc1, 0xa6, 0xa5, 0x58, 0x16, 0xac, 0xfa, 0x1a, 0xbb, 0x1a, 0x78, 0x53, 0x23, 0xb6, 0xde,
	0xa6, 0x11, 0xdb, 0x6f, 0x68, 0x44, 0x02, 0x2d, 0x91, 0x66, 0xe8, 0x76, 0x46, 0xd6, 0xb8, 0x13,
	0xaa, 0x35, 0x79, 0x0c, 0x40, 0xcb, 0x57, 0x3b, 0x0f, 0x4f, 0xfe, 0xeb, 0x29, 0x6d, 0x5a, 0xbe,
	0xd2, 0xb1, 0xf7, 0x02, 0x9c, 0x9a, 0x43, 0xb5, 0x5e, 0xb0, 0xfe, 0x47, 0x2f, 0x10, 0x17, 0x4e,
	0xe2, 0x22, 0x17, 0x98, 0x0b, 0x63, 0xcd, 0x2e, 0xf4, 0x3e, 0x86, 0x7b, 0xa6, 0xde, 0xe7, 0x48,
	0x59, 0xbc, 0x0c, 0x28, 0xa3, 0x19, 0x27, 0x17, 0xd0, 0x9e, 0xaf, 0xe8, 0x82, 0x1b, 0x8f, 0x75,
	0xe0, 0x7d, 0x08, 0xe7, 0x86, 0xac, 0x8e, 0xd7, 0xe3, 0xf8, 0x4e, 0xea, 0xf5, 0x5f, 0x0d, 0xe8,
	0x06, 0xa6, 0x24, 0xd9, 0x38, 0x37, 0xb8, 0x48, 0x73, 0x33, 0xee, 0xc8, 0x45, 0x55, 0x6d, 0x35,
	0x76, 0x07, 0x35, 0x0d, 0xf5, 0xb9, 0xf8, 0x04, 0x7a, 0x21, 0xae, 0x0b, 0x26, 0xcc, 0xdc, 0xab,
	0xd3, 0xaa, 0xbf, 0xc2, 0xe0, 0x08, 0xd6, 0x83, 0xff, 0x29, 0xf4, 0x55, 0xde, 0xd4, 0xcd, 0xc9,
	0x55, 0xed, 0xee, 0x63, 0xe1, 0x83, 0x3b, 0xbf, 0x73, 0x35, 0x13, 0xbe, 0x81, 0xfb, 0xdf, 0xaf,
	0x31, 0x3f, 0x36, 0xe0, 0xf2, 0xe8, 0xc4, 0x2a, 0x39, 0x20, 0xc7, 0x5f, 0xc7, 0xa7, 0x16, 0x79,
	0x02, 0xf7, 0x82, 0x72, 0xb6, 0x4a, 0xf9, 0xb2, 0xbe, 0x83, 0xdc, 0x41, 0x1e, 0x9c, 0xd7, 0x30,
	0x2d, 0xec, 0xe6, 0xec, 0x8f, 0xdb, 0xa1, 0xf5, 0xe7, 0xed, 0xd0, 0xfa, 0xfb, 0x76, 0x68, 0xfd,
	0xfa, 0xcf, 0xf0, 0x9d, 0x59, 0x47, 0xfd, 0x32, 0x3f, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xee,
	0xa5, 0x6a, 0x32, 0x44, 0x07, 0x00, 0x00,
}
